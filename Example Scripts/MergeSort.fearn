// FearnLang Implementation of Merge Sort

// Merge two subarrays L and M into arr
fn merge(arr: int[], p: int, q: int, r: int) => void

    // Create L ← A[p..q] and M ← A[q+1..r]
    let n1 : int = q - p + 1
    let n2 : int = r - p
    
    
    let L : int[n1]
    let M : int[n2]

    let i : int
    let j : int
    let k : int
    
    i = 0
    while i < n1
        L[i] = arr[p + i]
        i++
    
    i = 0
    while i < n2
        M[i] = arr[q + 1 + i]
        i++
        
    // Maintain current index of sub-arrays and main array
    i = 0
    j = 0
    k = p
    
    // Until we reach either end of either L or M, pick larger among
    // elements L and M and place them in the correct position at A[p..r]

    while i < n1 && j < n2
        if L[i] <= M[j]
            arr[k] = L[i]
            i++
        else
            arr[k] = M[j]
            j++
        k++

    // When we run out of elements in either L or M,
    // pick up the remaining elements and put in A[p..r]
    while i < n1
        arr[k] = L[i]
        i++
        k++

    while j < n2
        arr[k] = M[j]
        j++
        k++

// Divide the array into two subarrays, sort them and merge them
fn mergeSort(arr: int[], int l, int r) => void 
    let m : int
    if l < r
        // m is the point where the array is divided into two subarrays
        m = l + (r - l) / 2

        mergeSort(arr, l, m)
        mergeSort(arr, m + 1, r)

        // Merge the sorted subarrays
        merge(arr, l, m, r)

// Print the array#
fn printArray(arr: int[], size: int) => void
    let i: int = 0
    while i < size
        print(arr[i++])
        print(" ")
    print("\n")
  
// Driver program
fn main() => void
    arr: int[6] = {6, 5, 12, 10, 9, 1}
    size: int = sizeof(arr) / sizeof(arr[0])
    mergeSort(arr, 0, size - 1)
    print("Sorted array: \n")
    printArray(arr, size)